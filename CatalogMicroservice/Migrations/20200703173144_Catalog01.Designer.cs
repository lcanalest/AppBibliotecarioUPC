// <auto-generated />
using System;
using CatalogMicroservice.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CatalogMicroservice.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200703173144_Catalog01")]
    partial class Catalog01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CatalogMicroservice.Database.AttentionMode", b =>
                {
                    b.Property<int>("AttentionModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttentionModeId");

                    b.ToTable("AttentionModes");

                    b.HasData(
                        new
                        {
                            AttentionModeId = 1,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 283, DateTimeKind.Local).AddTicks(7470),
                            CreationUser = "ADMIN01",
                            Description = "Presencial"
                        },
                        new
                        {
                            AttentionModeId = 2,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 283, DateTimeKind.Local).AddTicks(8384),
                            CreationUser = "ADMIN01",
                            Description = "Virtual"
                        });
                });

            modelBuilder.Entity("CatalogMicroservice.Database.BackofficeUser", b =>
                {
                    b.Property<string>("BUserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BUserCode");

                    b.ToTable("BackofficeUsers");

                    b.HasData(
                        new
                        {
                            BUserCode = "b20200601",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 285, DateTimeKind.Local).AddTicks(134),
                            CreationUser = "ADMIN01",
                            Email = "b20200601@upc.edu.pe",
                            FirstName = "Mármol",
                            LastName = "Coloma",
                            Names = "Roberto André"
                        },
                        new
                        {
                            BUserCode = "s20200601",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 285, DateTimeKind.Local).AddTicks(991),
                            CreationUser = "ADMIN01",
                            Email = "s20200601@upc.edu.pe",
                            FirstName = "Chumacero",
                            LastName = "Cruz",
                            Names = "Luigui"
                        });
                });

            modelBuilder.Entity("CatalogMicroservice.Database.BiblioSchedule", b =>
                {
                    b.Property<string>("BUserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("BUserCode", "CampusId");

                    b.HasIndex("CampusId");

                    b.ToTable("BiblioSchedule");

                    b.HasData(
                        new
                        {
                            BUserCode = "b20200601",
                            CampusId = 1,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 285, DateTimeKind.Local).AddTicks(9684),
                            CreationUser = "ADMIN01",
                            EndTime = new DateTime(2020, 7, 3, 16, 31, 44, 285, DateTimeKind.Local).AddTicks(9090),
                            StartTime = new DateTime(2020, 7, 3, 12, 31, 44, 285, DateTimeKind.Local).AddTicks(8478)
                        });
                });

            modelBuilder.Entity("CatalogMicroservice.Database.Campus", b =>
                {
                    b.Property<int>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampusId");

                    b.ToTable("Campus");

                    b.HasData(
                        new
                        {
                            CampusId = 1,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 283, DateTimeKind.Local).AddTicks(9888),
                            CreationUser = "ADMIN01",
                            Description = "Campus Monterrico"
                        },
                        new
                        {
                            CampusId = 2,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(761),
                            CreationUser = "ADMIN01",
                            Description = "Campus Villa"
                        },
                        new
                        {
                            CampusId = 3,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(779),
                            CreationUser = "ADMIN01",
                            Description = "Campus San Miguel"
                        },
                        new
                        {
                            CampusId = 4,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(780),
                            CreationUser = "ADMIN01",
                            Description = "Campus San Isidro"
                        },
                        new
                        {
                            CampusId = 5,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(782),
                            CreationUser = "ADMIN01",
                            Description = "Campus Virtual"
                        });
                });

            modelBuilder.Entity("CatalogMicroservice.Database.KnowledgeBase", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InquiriesQuantity")
                        .HasColumnType("int");

                    b.Property<int>("NegativeCalification")
                        .HasColumnType("int");

                    b.Property<int>("Pinned")
                        .HasColumnType("int");

                    b.Property<int>("PositiveCalification")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("KnowledgeBase");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            Answer = "Respuesta para citación de figuras y tablas",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(4503),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "¿Cómo citar figuras o tablas?",
                            ServiceTypeId = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            Answer = "Respuesta para el parafraseo",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5389),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "¿Cómo es el parafraseo?",
                            ServiceTypeId = 1
                        },
                        new
                        {
                            QuestionId = 3,
                            Answer = "Respuesta para las notas a pie de página",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5407),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "¿Qué son las notas a pie de página? ¿Cómo se usan?",
                            ServiceTypeId = 1
                        },
                        new
                        {
                            QuestionId = 4,
                            Answer = "Respuesta para reporte de coincidencias de Safe Assign",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5409),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "Reporte de coincidencias de Safe Assign",
                            ServiceTypeId = 2
                        },
                        new
                        {
                            QuestionId = 5,
                            Answer = "Respuesta para búsqueda por temas",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5411),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "Búsqueda por temas",
                            ServiceTypeId = 3
                        },
                        new
                        {
                            QuestionId = 6,
                            Answer = "Respuesta para búsqueda de revistas en cuartiles",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5414),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "Búsqueda de revistas en cuartiles",
                            ServiceTypeId = 3
                        },
                        new
                        {
                            QuestionId = 7,
                            Answer = "Respuesta para revistas indexadas por disciplina",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5416),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "Revistas indexadas por disciplina",
                            ServiceTypeId = 3
                        },
                        new
                        {
                            QuestionId = 8,
                            Answer = "Respuesta para instalar import to Mendeley",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5418),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "¿Cómo instalar import to Mendeley?",
                            ServiceTypeId = 4
                        },
                        new
                        {
                            QuestionId = 9,
                            Answer = "Respuesta para instalar el plugin de word en Mendeley",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5419),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "¿Cómo instalar el plugin de word en Mendeley?",
                            ServiceTypeId = 4
                        },
                        new
                        {
                            QuestionId = 10,
                            Answer = "Respuesta para búsqueda de artículos científicos",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5421),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "¿Dónde puedo buscar artículos científicos?",
                            ServiceTypeId = 5
                        },
                        new
                        {
                            QuestionId = 11,
                            Answer = "Respuesta para ruta de plantillas de acuerdo a la carrera",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5423),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "¿Dónde puedo encontrar plantillas de acuerdo a mi carrera?",
                            ServiceTypeId = 6
                        },
                        new
                        {
                            QuestionId = 12,
                            Answer = "Respuesta para análisis bibliométrico?",
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(5424),
                            CreationUser = "ADMIN01",
                            InquiriesQuantity = 0,
                            NegativeCalification = 0,
                            Pinned = 0,
                            PositiveCalification = 0,
                            Question = "¿En qué se basa el análisis bibliométrico?",
                            ServiceTypeId = 7
                        });
                });

            modelBuilder.Entity("CatalogMicroservice.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 285, DateTimeKind.Local).AddTicks(2401),
                            CreationUser = "ADMIN01",
                            Description = "Bibliotecólogo"
                        },
                        new
                        {
                            RoleId = 2,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 285, DateTimeKind.Local).AddTicks(3231),
                            CreationUser = "ADMIN01",
                            Description = "Supervisor"
                        });
                });

            modelBuilder.Entity("CatalogMicroservice.Database.ServiceRequest", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttentionModeId")
                        .HasColumnType("int");

                    b.Property<string>("BUserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("Career")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UPCCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("AttentionModeId");

                    b.HasIndex("BUserCode");

                    b.HasIndex("CampusId");

                    b.HasIndex("ServiceStatusId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("CatalogMicroservice.Database.ServiceStatus", b =>
                {
                    b.Property<int>("ServiceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceStatusId");

                    b.ToTable("ServiceStatus");

                    b.HasData(
                        new
                        {
                            ServiceStatusId = 1,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(6817),
                            CreationUser = "ADMIN01",
                            Description = "Registrada"
                        },
                        new
                        {
                            ServiceStatusId = 2,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(7653),
                            CreationUser = "ADMIN01",
                            Description = "Asignada"
                        },
                        new
                        {
                            ServiceStatusId = 3,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(7670),
                            CreationUser = "ADMIN01",
                            Description = "En atención"
                        },
                        new
                        {
                            ServiceStatusId = 4,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 284, DateTimeKind.Local).AddTicks(7671),
                            CreationUser = "ADMIN01",
                            Description = "Cerrada"
                        });
                });

            modelBuilder.Entity("CatalogMicroservice.Database.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            ServiceTypeId = 1,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 281, DateTimeKind.Local).AddTicks(6497),
                            CreationUser = "ADMIN01",
                            Description = "Normas de citación y referencias"
                        },
                        new
                        {
                            ServiceTypeId = 2,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 282, DateTimeKind.Local).AddTicks(5132),
                            CreationUser = "ADMIN01",
                            Description = "Test de Similitud"
                        },
                        new
                        {
                            ServiceTypeId = 3,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 282, DateTimeKind.Local).AddTicks(5167),
                            CreationUser = "ADMIN01",
                            Description = "Búsqueda de información"
                        },
                        new
                        {
                            ServiceTypeId = 4,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 282, DateTimeKind.Local).AddTicks(5169),
                            CreationUser = "ADMIN01",
                            Description = "Gestores de referencias (Mendeley)"
                        },
                        new
                        {
                            ServiceTypeId = 5,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 282, DateTimeKind.Local).AddTicks(5171),
                            CreationUser = "ADMIN01",
                            Description = "Búsqueda de artículos científicos"
                        },
                        new
                        {
                            ServiceTypeId = 6,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 282, DateTimeKind.Local).AddTicks(5172),
                            CreationUser = "ADMIN01",
                            Description = "Plantilla de Tesis y Trabajo de investigación"
                        },
                        new
                        {
                            ServiceTypeId = 7,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 282, DateTimeKind.Local).AddTicks(5173),
                            CreationUser = "ADMIN01",
                            Description = "Análisis bibliométrico"
                        },
                        new
                        {
                            ServiceTypeId = 8,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 282, DateTimeKind.Local).AddTicks(5175),
                            CreationUser = "ADMIN01",
                            Description = "Asesoría"
                        });
                });

            modelBuilder.Entity("CatalogMicroservice.Database.UserRoles", b =>
                {
                    b.Property<string>("BUserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BUserCode", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            BUserCode = "b20200601",
                            RoleId = 1,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 285, DateTimeKind.Local).AddTicks(4830),
                            CreationUser = "ADMIN01"
                        },
                        new
                        {
                            BUserCode = "s20200601",
                            RoleId = 2,
                            CreationDate = new DateTime(2020, 7, 3, 12, 31, 44, 285, DateTimeKind.Local).AddTicks(5997),
                            CreationUser = "ADMIN01"
                        });
                });

            modelBuilder.Entity("CatalogMicroservice.Database.BiblioSchedule", b =>
                {
                    b.HasOne("CatalogMicroservice.Database.BackofficeUser", "BackofficeUser")
                        .WithMany("BiblioSchedule")
                        .HasForeignKey("BUserCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogMicroservice.Database.Campus", "Campus")
                        .WithMany("BiblioSchedule")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogMicroservice.Database.KnowledgeBase", b =>
                {
                    b.HasOne("CatalogMicroservice.Database.ServiceType", "ServiceType")
                        .WithMany("KnowledgeBase")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogMicroservice.Database.ServiceRequest", b =>
                {
                    b.HasOne("CatalogMicroservice.Database.AttentionMode", "AttentionMode")
                        .WithMany("ServiceRequest")
                        .HasForeignKey("AttentionModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogMicroservice.Database.BackofficeUser", "BackofficeUser")
                        .WithMany("ServiceRequest")
                        .HasForeignKey("BUserCode");

                    b.HasOne("CatalogMicroservice.Database.Campus", "Campus")
                        .WithMany("ServiceRequest")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogMicroservice.Database.ServiceStatus", "ServiceStatus")
                        .WithMany("ServiceRequest")
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatalogMicroservice.Database.ServiceType", "ServiceType")
                        .WithMany("ServiceRequest")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogMicroservice.Database.UserRoles", b =>
                {
                    b.HasOne("CatalogMicroservice.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
